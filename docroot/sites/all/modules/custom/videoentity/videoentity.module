<?php
/**
 * @file
 * Provides a simple custom entity type named 'video' for tracking embed codes.
 */

/**
 * Implements hook_entity_info().
 */
function videoentity_entity_info() {
  $info = array();
  $info['video'] = array(
    // Human readable label.
    'label' => t('Video'),
    'base table' => 'videoentity_video',
    'controller class' => 'EntityAPIController',
    'entity keys' => array(
      'id' => 'id',
    ),
    // Tell field api it can attach fields to our custom video entity.
    'fieldable' => TRUE,
    'bundles' => array(
      'videoentity' => array(
        'label' => t('Video'),
        'admin' => array(
          // NOTE: this still needs to be provided via hook_menu as well, it is provided here
          // as a convenience for Field API so it knows where to attach it's forms.
          'path' => 'admin/videoentity',
          'access arguments' => array('administer video'),
        ),
      ),
    ),
    // Add views support
    'module' => 'videoentity',
    'views controller class' => 'VideoEntityViewsController',
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function videoentity_menu() {
  $items = array();
  $items['videoentity'] = array(
    'title' => 'Demo page',
    'page callback' => 'videoentity_demo_page',
    'access callback' => TRUE,
    'menu' => 'navigation',
  );
  $items['admin/videoentity'] = array(
    'title' => 'Video Entities',
    'page callback' => 'videoentity_admin_page',
    'access arguments' => array('administer video'),
//    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/videoentity/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Callback for /videoentity page.
 *
 * Just a place to test things out and be able to see the results on a page.
 */
function videoentity_demo_page() {
  $video = entity_load('videoentity', array(1));
  kpr($video);

  // Or load it with EFQ.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'video');
  $results = $query->execute();
  kpr($results);
  return 'hello there!';
}

/**
 * Page callback for admin/config/media/video.
 */
function videoentity_admin_page() {
  return 'Add some fields to your video entities using the forms provided by Field API.';
}

/**
 * Implements hook_permission().
 *
 * Used to illustrate using a custom permission to control access to an entities bundle.
 */
function videoentity_permission() {
  return array(
    'administer video' => array(
      'title' => t('Administer video'),
      'description' => t('Perform administrative tasks on video entities.'),
    ),
  );
}

class VideoEntityViewsController extends EntityDefaultViewsController {
  /**
   *  Add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
    // Add your custom data here
    return $data;
  }
}

